fn main() {
    println!("Hello, world!");
}

/*
 fn gcd 定义一个名为 gcd 的函数
 函数接收两个参数 n m
 每个参数的类型 u64 是 unsigned 64 位整数
 -> 标识位于返回值类型之前
 函数返回一个 64 位的整数数值
 四个空格是 rust 标准的缩进风格
 默认情况下，变量初始化之后的值就无法改变
 但是 mut(mutable) 关键字允许函数体给变量赋值
*/
fn gcd(mut n: u64, mut m: u64) -> u64 {
    /* 断言 ! 字符表示这是一个宏调用，不是函数调用 */
    assert!(n != 0 && m != 0);
    /* rust 条件语句不需要使用括号括起来
    但是控制语句需要使用花括号括起来 */
    while m != 0 {
        if m < n {
            /* let 语句声明一个局部变量
            不需要写 t 的类型
            Rust 会通过变量的使用方式推断出变量的类型 */
            let t = m;
            m = n;
            n = t;
        }
        m = m % n;
    }
    /* Rust 有 return 语句
    但是如果函数体以没有分号结尾的语句结尾
    这个语句的值就是函数的返回体
    当控制脱离函数末尾时
     这是 Rust 函数返回的典型用法
     使用 return 语句只是为了显示表示从函数的中间返回值 */
    n
}

/*  单元测试案例
    函数定义上面的 #[test] 表示这个函数是一个测试函数
    正常编译的情况下回跳过这些测试函数
    使用 cargo test 命令则会自动运行测试案例
*/
#[test]
fn test_gcd() {
    assert_eq!(gcd(14, 15), 1);
    assert_eq!(gcd(2 * 3 * 4 * 5, 2 * 3 * 4 * 5 * 6), 2 * 3 * 4 * 5);
}
